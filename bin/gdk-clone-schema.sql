-- ###### #    # ##### ###### #    #  ####  #  ####  #    #  ####
-- #       #  #    #   #      ##   # #      # #    # ##   # #
-- #####    ##     #   #####  # #  #  ####  # #    # # #  #  ####
-- #        ##     #   #      #  # #      # # #    # #  # #      #
-- #       #  #    #   #      #   ## #    # # #    # #   ## #    #
-- ###### #    #   #   ###### #    #  ####  #  ####  #    #  ####
--
CREATE EXTENSION IF NOT EXISTS citext WITH SCHEMA public;

CREATE EXTENSION postgis;

-- // triggers for profile needed
CREATE TABLE "public"."profile" (
	"id" uuid NOT NULL,
	"name" citext NOT NULL CONSTRAINT name_length_min_3_check CHECK (char_length(name) >= 3) CONSTRAINT name_length_max_42_check CHECK (char_length(name) <= 42) CONSTRAINT special_character_check CHECK ("name" ~* '^[a-zA-Z0-9_-]*$') CONSTRAINT name_unique UNIQUE,
);

-- #####   ##   #####  #      ######  ####
--   #    #  #  #    # #      #      #
--   #   #    # #####  #      #####   ####
--   #   ###### #    # #      #           #
--   #   #    # #    # #      #      #    #
--   #   #    # #####  ###### ######  ####
--
CREATE TABLE "public"."trees" (
	"id" int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	"type" text NOT NULL,
	"geom" geometry NOT NULL,
);

CREATE TABLE "public"."waterings" (
	"id" int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	"tree_id" int8 NOT NULL REFERENCES "public"."trees" ("id"),
	"amount" float NOT NULL,
	"user_id" uuid NOT NULL REFERENCES "public"."users" ("id") ON DELETE CASCADE ON UPDATE CASCADE,
	"created_at" timestampz with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
	"user_timestamp" timestampz with time zone NOT NULL DEFAULT CURRENT_TIMESTAMP,
);

CREATE TABLE "public"."adoptions" (
	"tree_id" int8 NOT NULL REFERENCES "public"."trees" ("id"),
	"user_id" uuid NOT NULL REFERENCES "public"."profile" ("id") ON DELETE CASCADE ON ON UPDATE CASCADE,
	PRIMARY KEY (tree_id, user_id)
);

-- ###### #    # #    #  ####  ##### #  ####  #    #  ####
-- #      #    # ##   # #    #   #   # #    # ##   # #
-- #####  #    # # #  # #        #   # #    # # #  #  ####
-- #      #    # #  # # #        #   # #    # #  # #      #
-- #      #    # #   ## #    #   #   # #    # #   ## #    #
-- #       ####  #    #  ####    #   #  ####  #    #  ####
--   ##   #    # #####
--  #  #  ##   # #    #
-- #    # # #  # #    #
-- ###### #  # # #    #
-- #    # #   ## #    #
-- #    # #    # #####
-- ##### #####  #  ####   ####  ###### #####   ####
--   #   #    # # #    # #    # #      #    # #
--   #   #    # # #      #      #####  #    #  ####
--   #   #####  # #  ### #  ### #      #####       #
--   #   #   #  # #    # #    # #      #   #  #    #
--   #   #    # #  ####   ####  ###### #    #  ####
--
-- inserts a row into public.users
CREATE FUNCTION public.handle_new_user ()
	RETURNS TRIGGER
	LANGUAGE plpgsql
	SECURITY DEFINER
	SET search_path = public
	AS $$
BEGIN
	INSERT INTO public.profiles (id)
		VALUES (NEW.id);
	RETURN new;
END;
$$;

-- trigger the function every time a user is created
CREATE TRIGGER on_auth_user_created
	AFTER INSERT ON auth.users
	FOR EACH ROW
	EXECUTE PROCEDURE public.handle_new_user ();

-- trigger for deleting profiles when user is deleted from auth table
DROP TRIGGER IF EXISTS on_auth_user_deleted ON auth.users;

DROP FUNCTION IF EXISTS public.handle_deleted_user ();

CREATE FUNCTION public.handle_deleted_user ()
	RETURNS TRIGGER
	AS $$
BEGIN
	DELETE FROM public.profiles
	WHERE id = OLD.id;
	RETURN old;
END;
$$
LANGUAGE plpgsql
SECURITY DEFINER;

-- trigger the function every time a user is deleted
CREATE TRIGGER on_auth_user_deleted
	AFTER DELETE ON auth.users
	FOR EACH ROW
	EXECUTE PROCEDURE public.handle_deleted_user ();

-- ######  #        #####
-- #     # #       #     #
-- #     # #       #
-- ######  #        #####
-- #   #   #             #
-- #    #  #       #     #
-- #     # #######  #####
--
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

ALTER TABLE adoption ENABLE ROW LEVEL SECURITY;

ALTER TABLE waterings ENABLE ROW LEVEL SECURITY;

ALTER TABLE trees ENABLE ROW LEVEL SECURITY;

-- trees
CREATE POLICY "Public trees are viewable by everyone." ON trees
	FOR SELECT TO authenticated, anon
		USING (TRUE);

-- user profiles
CREATE POLICY "Public profiles are viewable by everyone." ON profiles
	FOR SELECT TO authenticated, anon
		USING (TRUE);

CREATE POLICY "Users can update their own profiles." ON profiles
	FOR UPDATE
		USING (auth.uid () = id);

-- adoptions
CREATE POLICY "Public adoptions are viewable by everyone." ON adoptions
	FOR SELECT TO authenticated, anon
		USING (TRUE);

CREATE POLICY "Users can update their own adoptions." ON adoptions
	FOR UPDATE
		USING (auth.uid () = user_id);

CREATE POLICY "Users can delete their own adoptions." ON adoptions
	FOR DELETE
		USING (auth.uid () = user_id);

-- waterings
CREATE POLICY "Public waterings are viewable by everyone." ON waterings
	FOR SELECT TO authenticated, anon
		USING (TRUE);

CREATE POLICY "Users can update their own waterings." ON waterings
	FOR UPDATE
		USING (auth.uid () = user_id);

CREATE POLICY "Users can delete their own waterings." ON waterings
	FOR DELETE
		USING (auth.uid () = user_id);

